swagger: '2.0'
info:
  version: '1.0'
  title: Order API
  description: Teste de API
paths:
  /orders/{id}:
    get:
      summary: Get a order by ID
      parameters:
        - in: path
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Successful response
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OrdersFunction.Arn}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    delete:
      summary: Delete a order
      parameters:
        - in: path
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Successful response
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OrdersFunction.Arn}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
  /orders/{id}/relationships/{relation}:
    get:
      summary: Get all relation registers from a order
      parameters:
        - in: path
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Successful response
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OrdersFunction.Arn}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
  /orders/{id}/{relation}:
    get:
      summary: Get all relation registers from a order
      parameters:
        - in: path
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Successful response
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OrdersFunction.Arn}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
  /orders:
    post:
      summary: Create a order
      parameters:
        - in: body
          name: order
          required: true
          schema:
            $ref: '#/definitions/Order'
      responses:
        '201':
          description: Successful response
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OrdersFunction.Arn}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    get:
      summary: Get all orders
      responses:
        '200':
          description: Successful response
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OrdersFunction.Arn}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
definitions:
  Order:
    type: object
    properties:
      id:
        type: string
      userId:
        type: string
      totalPrice:
        type: number
      orderDate:
        type: string
